<div class="card mt-6" x-data="kanban()">
  <div class="flex items-center justify-between mb-4">
    <div class="text-lg font-semibold"><%= t.get('tasks.admin.title') %></div>
    <button class="btn-primary" @click="openCreateModal = true">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 inline" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 5v14M5 12h14"/></svg>
      <%= t.get('tasks.admin.create') %>
    </button>
  </div>

  <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
    <template x-for="column in columns" :key="column.id">
      <div class="bg-discord-dark-200 rounded-lg p-3 min-h-[300px]"
           @dragover.prevent
           @drop="onDrop(column.id)">
        <div class="flex items-center justify-between mb-2">
          <div class="font-semibold" x-text="column.name"></div>
          <span class="text-xs bg-discord-dark-400 px-2 py-1 rounded" x-text="tasks[column.id].length"></span>
        </div>
        <div class="space-y-2">
          <template x-for="task in tasks[column.id]" :key="task.id">
            <div class="bg-discord-dark-300 rounded p-3 cursor-move" draggable="true"
                 @dragstart="onDrag(task)" @click="openTask(task)">
              <div class="font-medium" x-text="task.title"></div>
              <div class="text-xs text-discord-light-300 mt-1 truncate" x-text="task.description"></div>
              <div class="flex items-center gap-2 mt-2 text-xs">
                <span class="bg-discord-primary text-white px-2 py-0.5 rounded" x-text="(task.assignees||[]).length + ' @'"></span>
                <span class="bg-discord-green text-white px-2 py-0.5 rounded" x-text="(task.approvals||0) + ' âœ“'"></span>
                <template x-if="task.github && task.github.url">
                  <a :href="task.github.url" target="_blank" class="text-discord-blue hover:underline">GH</a>
                </template>
              </div>
            </div>
          </template>
        </div>
      </div>
    </template>
  </div>

  <!-- Create Task Modal -->
  <div x-show="openCreateModal" style="display: none;" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
    <div @click.away="openCreateModal = false" class="bg-discord-dark-200 p-6 rounded-lg shadow-lg w-full max-w-lg">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold"><%= t.get('tasks.admin.createTitle') %></h3>
        <button @click="openCreateModal = false" class="text-discord-light-300 hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <form class="space-y-3">
        <div>
          <label class="block mb-1 text-sm font-medium"><%= t.get('tasks.field.title') %></label>
          <input x-model="form.title" type="text" required class="w-full px-3 py-2 rounded bg-discord-dark-300 text-discord-foreground placeholder:text-discord-light-300 focus:outline-none focus:ring-2 focus:ring-discord-primary" />
        </div>
        <div>
          <label class="block mb-1 text-sm font-medium"><%= t.get('tasks.field.description') %></label>
          <textarea x-model="form.description" rows="3" class="w-full px-3 py-2 rounded bg-discord-dark-300 text-discord-foreground placeholder:text-discord-light-300 focus:outline-none focus:ring-2 focus:ring-discord-primary"></textarea>
        </div>
        <div class="grid grid-cols-2 gap-3">
          <div>
            <label class="block mb-1 text-sm font-medium"><%= t.get('tasks.field.status') %></label>
            <select x-model="form.status" class="w-full px-3 py-2 rounded bg-discord-dark-300 text-discord-foreground focus:outline-none focus:ring-2 focus:ring-discord-primary">
              <template x-for="opt in columns" :key="opt.id">
                <option :value="opt.id" x-text="opt.name"></option>
              </template>
            </select>
          </div>
          <div>
            <label class="block mb-1 text-sm font-medium"><%= t.get('tasks.field.github') %></label>
            <input x-model="form.githubUrl" type="url" placeholder="https://github.com/owner/repo/issues/123" class="w-full px-3 py-2 rounded bg-discord-dark-300 text-discord-foreground placeholder:text-discord-light-300 focus:outline-none focus:ring-2 focus:ring-discord-primary" />
          </div>
        </div>
        <div class="flex justify-end gap-2 pt-2">
          <button type="button" @click="openCreateModal = false" class="px-4 py-2 rounded bg-discord-dark-400 text-white hover:bg-discord-dark-500">
            <%= t.get('tasks.action.cancel') %>
          </button>
          <button type="button" @click="createTask()" class="btn-primary">
            <%= t.get('tasks.action.create') %>
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Task Detail Modal -->
  <div x-show="openDetailModal" style="display:none;" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
    <div @click.away="openDetailModal = false" class="bg-discord-dark-200 p-6 rounded-lg shadow-lg w-full max-w-2xl">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-semibold" x-text="current?.title"></h3>
        <button @click="openDetailModal = false" class="text-discord-light-300 hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="block mb-1 text-sm font-medium"><%= t.get('tasks.field.description') %></label>
          <textarea x-model="current.description" rows="6" class="w-full px-3 py-2 rounded bg-discord-dark-300 text-discord-foreground placeholder:text-discord-light-300 focus:outline-none focus:ring-2 focus:ring-discord-primary"></textarea>
          <div class="mt-2">
            <label class="block mb-1 text-sm font-medium"><%= t.get('tasks.field.github') %></label>
            <input x-model="detail.githubUrl" type="url" class="w-full px-3 py-2 rounded bg-discord-dark-300 text-discord-foreground placeholder:text-discord-light-300 focus:outline-none focus:ring-2 focus:ring-discord-primary" placeholder="https://github.com/owner/repo/pull/123"/>
          </div>
        </div>
        <div>
          <div>
            <label class="block mb-1 text-sm font-medium"><%= t.get('tasks.field.assignees') %></label>
            <input x-model="detail.assigneesInput" placeholder="user1,user2" class="w-full px-3 py-2 rounded bg-discord-dark-300 text-discord-foreground placeholder:text-discord-light-300 focus:outline-none"/>
            <div class="text-xs text-discord-light-300 mt-1"><%= t.get('tasks.help.assignees') %></div>
          </div>
          <div class="mt-3">
            <label class="block mb-1 text-sm font-medium"><%= t.get('tasks.field.testers') %></label>
            <div class="space-y-2 max-h-40 overflow-y-auto bg-discord-dark-300 rounded p-2">
              <template x-for="tester in (current.testers||[])" :key="tester.id">
                <label class="flex items-center gap-2">
                  <input type="checkbox" x-model="tester.approved" @change="toggleApproval(current.id, tester)"/>
                  <span x-text="tester.name"></span>
                </label>
              </template>
            </div>
            <div class="flex gap-2 mt-2">
              <input x-model="detail.newTester" placeholder="tester#1234" class="flex-1 px-3 py-2 rounded bg-discord-dark-300 text-discord-foreground placeholder:text-discord-light-300 focus:outline-none"/>
              <button type="button" class="px-3 py-2 rounded bg-discord-dark-400 hover:bg-discord-dark-500" @click="addTester()"><%= t.get('tasks.action.add') %></button>
            </div>
          </div>
        </div>
      </div>
      <div class="mt-4">
        <label class="block mb-1 text-sm font-medium"><%= t.get('tasks.field.comments') %></label>
        <div class="space-y-2 max-h-40 overflow-y-auto bg-discord-dark-300 rounded p-2">
          <template x-for="c in (current.comments||[])" :key="c.id">
            <div class="text-sm"><span class="text-discord-light-300" x-text="c.user.name"></span>: <span x-text="c.text"></span></div>
          </template>
        </div>
        <div class="flex gap-2 mt-2">
          <input x-model="detail.commentText" placeholder="<%= t.get('tasks.placeholder.comment') %>" class="flex-1 px-3 py-2 rounded bg-discord-dark-300 text-discord-foreground placeholder:text-discord-light-300 focus:outline-none"/>
          <button type="button" class="px-3 py-2 rounded bg-discord-dark-400 hover:bg-discord-dark-500" @click="addComment()"><%= t.get('tasks.action.comment') %></button>
        </div>
      </div>
      <div class="flex justify-end gap-2 mt-4">
        <button type="button" @click="saveDetail()" class="btn-primary"><%= t.get('tasks.action.save') %></button>
      </div>
    </div>
  </div>
</div>

<script>
  function kanban() {
    return {
      openCreateModal: false,
      openDetailModal: false,
      drag: null,
      columns: [
        { id: 'backlog', name: '<%= t.get('tasks.column.backlog') %>' },
        { id: 'working', name: '<%= t.get('tasks.column.working') %>' },
        { id: 'testing', name: '<%= t.get('tasks.column.testing') %>' },
        { id: 'beta', name: '<%= t.get('tasks.column.beta') %>' },
        { id: 'done', name: '<%= t.get('tasks.column.done') %>' },
      ],
      tasks: { backlog: [], working: [], testing: [], beta: [], done: [] },
      form: { title: '', description: '', status: 'backlog', githubUrl: '' },
      current: null,
      detail: { assigneesInput: '', newTester: '', commentText: '', githubUrl: '' },

      async load() {
        const res = await fetch('/admin/tasks/api/list');
        const data = await res.json();
        const grouped = { backlog: [], working: [], testing: [], beta: [], done: [] };
        (data.tasks || []).forEach(t => { if (!grouped[t.status]) grouped[t.status] = []; grouped[t.status].push(t); });
        this.tasks = grouped;
      },

      async createTask() {
        const payload = {
          title: this.form.title,
          description: this.form.description,
          status: this.form.status,
          github: this.parseGithub(this.form.githubUrl)
        };
        const res = await fetch('/admin/tasks/api/create', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
        const data = await res.json();
        if (data.ok) {
          this.openCreateModal = false;
          this.form = { title: '', description: '', status: 'backlog', githubUrl: '' };
          await this.load();
        }
      },

      onDrag(task) { this.drag = task; },
      async onDrop(column) {
        if (!this.drag) return;
        await fetch('/admin/tasks/api/update', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ id: this.drag.id, status: column }) });
        this.drag = null;
        await this.load();
      },

      openTask(task) {
        this.current = JSON.parse(JSON.stringify(task));
        this.detail.assigneesInput = (task.assignees||[]).map(a => a.name).join(',');
        this.detail.githubUrl = task.github?.url || '';
        this.openDetailModal = true;
      },

      async saveDetail() {
        const assignees = (this.detail.assigneesInput||'').split(',').map(x => x.trim()).filter(Boolean).map(n => ({ id: n, name: n }));
        const github = this.parseGithub(this.detail.githubUrl);
        await fetch('/admin/tasks/api/update', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ id: this.current.id, description: this.current.description, assignees, testers: this.current.testers, github }) });
        this.openDetailModal = false;
        await this.load();
      },

      async toggleApproval(taskId, tester) {
        await fetch('/admin/tasks/api/approval', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ id: taskId, testerId: tester.id, testerName: tester.name, approved: tester.approved }) });
        await this.load();
      },

      addTester() {
        const name = (this.detail.newTester||'').trim();
        if (!name) return;
        const id = name; // placeholder id
        const testers = this.current.testers || [];
        testers.push({ id, name, approved: false });
        this.current.testers = testers;
        this.detail.newTester = '';
      },

      async addComment() {
        const text = (this.detail.commentText||'').trim();
        if (!text) return;
        await fetch('/admin/tasks/api/comment', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ id: this.current.id, userId: 'admin', userName: 'Admin', text }) });
        this.detail.commentText = '';
        await this.load();
        const updated = Object.values(this.tasks).flat().find(t => t.id === this.current.id);
        if (updated) this.current = updated;
      },

      parseGithub(url) {
        if (!url) return null;
        try {
          const u = new URL(url);
          if (u.hostname !== 'github.com') return null;
          const parts = u.pathname.split('/').filter(Boolean);
          if (parts.length >= 4 && (parts[2] === 'issues' || parts[2] === 'pull')) {
            return { type: parts[2] === 'issues' ? 'issue' : 'pr', repo: parts[0] + '/' + parts[1], number: Number(parts[3]), url };
          }
          return { type: 'issue', repo: parts.slice(0,2).join('/'), number: 0, url };
        } catch { return null; }
      },

      async init() { await this.load(); },
    };
  }

  document.addEventListener('alpine:init', () => {});
  document.addEventListener('DOMContentLoaded', () => {
    if (window.Alpine) return; // Admin layout likely provides Alpine; if not, we still bind manually.
  });
</script>
