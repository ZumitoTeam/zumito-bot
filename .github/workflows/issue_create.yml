name: Generate Embed Builder Instructions

on:
  issues:
    types: [opened]

jobs:
  generate-instructions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/02-new_embed.yml

      - name: Check if issue was created using the correct template
        id: check_template
        run: |
          issue_body="${{ github.event.issue.body }}"
          if [[ "$issue_body" == *"Embed Name"* && "$issue_body" == *"Module Name"* ]]; then
            echo "Template matched"
            echo "template=true" >> $GITHUB_ENV
          else
            echo "Template not matched"
            echo "template=false" >> $GITHUB_ENV
          fi

      - name: Generate instructions
        id: generate_instructions
        if: env.template == 'true'
        run: |
          module_name="${{ steps.issue-parser.outputs.issueparser_module }}"
          embed_name="${{ steps.issue-parser.outputs.issueparser_name }}"
          
          # Use sed to update the instructions with the user input
          instructions=$(echo '
            \n${{ github.event.issue.body }}
            ## Instructions:
            Please follow the instructions below before submitting your issue.

            1. Create a file in /src/modules/$module_name/embeds/${embed_name}EmbedBuilder.ts
            2. Replace $module_name and $embed_name with the respective names provided in the form.

            Example code:

            \`\`\`js
            import { EmbedBuilder } from \'zumito-framework/discord\';
            import { TranslationManager } from "zumito-framework";

            export class ${embed_name}EmbedBuilder {

                translator: TranslationManager;

                constructor() {
                    this.translator = ServiceContainer.getService(TranslationManager);
                }

                getEmbed({question, answer, locale}: any) {
                    const exampleEmbed = new EmbedBuilder()
                        .setColor(0x0099FF)
                        .setTitle(\'Some title\')
                        .setDescription(this.translator.get(\'examplePhrase1\', locale));

                    return exampleEmbed;
                }
            }
            \`\`\`
            '
          )

          echo "instructions $instructions"
          
          # Use GitHub API to update the issue body with new instructions
          curl -X PATCH "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d "{\"body\": \"$instructions\"}"

