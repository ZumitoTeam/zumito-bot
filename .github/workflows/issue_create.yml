name: Generate Embed Builder Instructions

on:
  issues:
    types: [opened]

jobs:
  generate-instructions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/02-new_embed.yml

      - name: Check if issue was created using the correct template
        id: check_template
        run: |
          issue_body="${{ github.event.issue.body }}"
          if [[ "$issue_body" == *"Embed Name"* && "$issue_body" == *"Module Name"* ]]; then
            echo "Template matched"
            echo "template=true" >> $GITHUB_ENV
          else
            echo "Template not matched"
            echo "template=false" >> $GITHUB_ENV
          fi

      - name: Generate instructions
        id: generate_instructions
        if: env.template == 'true'
        run: |
          module_name="${{ steps.issue-parser.outputs.issueparser_module }}"
          embed_name="${{ steps.issue-parser.outputs.issueparser_name }}"
          
          instructions=""
          instructions+='\n## Instructions:'
          instructions+='\n'
          instructions+='\n1. Create a file in /src/modules/${module_name}/embeds/${embed_name}EmbedBuilder.ts'
          instructions+='\n2. Replace ${module_name} and ${embed_name} with the respective names provided in the form.'
          instructions+='\n'
          instructions+='\nExample code:'
          instructions+='\n\`\`\`js'
          instructions+="\nimport { EmbedBuilder } from 'zumito-framework/discord';"  
          instructions+="\nimport { TranslationManager } from 'zumito-framework';"
          instructions+='\n'
          instructions+='\nexport class ${embed_name}EmbedBuilder {'
          instructions+='\n'
          instructions+='\n    translator: TranslationManager;'
          instructions+='\n'
          instructions+='\n    constructor() {'
          instructions+='\n        this.translator = ServiceContainer.getService(TranslationManager);'
          instructions+='\n    }'
          instructions+='\n'
          instructions+='\n    getEmbed({question, answer, locale}: any) {'
          instructions+='\n        const exampleEmbed = new EmbedBuilder()'
          instructions+='\n            .setColor(0x0099FF)'
          instructions+="\n            .setTitle('Some title')"
          instructions+="\n            .setDescription(this.translator.get('examplePhrase1', locale));"
          instructions+='\n'
          instructions+='\n        return exampleEmbed;'
          instructions+='\n    }'
          instructions+='\n}'
          instructions+='\n\`\`\`'

          # Append the instructions as a comment on the issue
          echo "Generated instructions:\n$instructions"

          echo " { \"body\": \"$(echo $instructions\" } " \

          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d " { \"body\": \"$(echo $instructions)\" } " \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"